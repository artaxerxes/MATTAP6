function [stimulus, all_onsets, daq_delay] = mattap_eventdetect_v6_00(raw, event_mode, visual_on)
% Mattap Event Detection
% Inputs:
% tr_file: raw_data file(s) generated by mattap
% fpath: file path where raw_data file exists
% event_mode: vector containing value for each input channel - 1 for onset,
% 2 for peaks, 3 for troughs
% visual_on: enable Data Analyser GUI to check event detection
%
% Outputs:
% stimulus: metronome parameters
% onsets: extracted tap onsets
% gen_met_ons: extracted metronome events
% pur_met_ons: extracted non-jittered metronome events.


sens = 0.5; %sensitivity for peak detect
ons_thresh = 0.2; %threshold for onset detect
p_inds = 1; %metronome pulse index on raw data
if size(raw.raw_data, 2) == 1
    tp_inds = 1; 
else
%     tp_inds = 2:size(raw.raw_data, 2); %tap channel indexes
    tp_inds=6;
end

Fs = raw.Fs; %sample frequency
to_ms = 1000/Fs; %millisecond conversion factor.
stimulus = raw.stimulus; %metronome properties


sync_pulses = raw.sync_pulses; %convert cell to matrix.
pure_pulses = raw.pure_pulses;

if tp_inds ~= 1 %not mic input
    [cap_met_ons, cap_sync_clean, offs] = threshdet_tap_v6_00(raw.raw_data(:,p_inds), stimulus{1}.isi, Fs, ons_thresh); %call thresh detector for captured metronome pulse for sync_pulses
    cap_met_ons =  cap_met_ons{1} .* to_ms;
end

for m= 1:raw.max_en %for each metronome
    mn_isi(m) = stimulus{m}.isi; %get mn_isi (used for double tap detections ).
    [gen_met_tmp, gen_sync_clean{m}, offs] = threshdet_tap_v6_00(sync_pulses{m}, mn_isi(m), Fs, ons_thresh); %generated metronome pulse on onsets
    [pur_met_tmp, pur_sync_clean{m}, offs] = threshdet_tap_v6_00(pure_pulses{m}, mn_isi(m), Fs, ons_thresh); %pure pulse onsets
    
    gen_met_ons{m} = cell2mat(gen_met_tmp) .* to_ms; %convert to ms
    pure_met_ons{m} = cell2mat(pur_met_tmp) .* to_ms;
end

if tp_inds(1) ~= 1
    if ~isempty(cap_met_ons)
        daq_delay = cap_met_ons(1) - gen_met_ons{1}(1); %the difference between the real timing pulse occurence and original.
    else
        daq_delay = 0;
    end
end

%Time vector in ms
t = [1000.*(0:1/Fs:(1/Fs)*size(raw.raw_data, 1))]'; %get time samples in ms
t = t(1:end-1);

%deal with special case of mic input
if tp_inds(1) ==1
    [clean_sig] = mic_transform_v6_00(raw.raw_data(:,1), Fs, 50, .01); %call special transform for mic tap data
    start = find(clean_sig(2:end) == 0); % find the trigger point
    start = start(1); 
    daq_delay = (start .* to_ms) - gen_met_ons{1}(1); %calculate the daq delay
    tap_dat = clean_sig; %force first sample to zero
else
    tap_dat = raw.raw_data(:,tp_inds); %assign normal data to tap dat
end


%movement onsets (taps)
for ii = 1:length(tp_inds)
    switch event_mode(ii)
        case 0 %Onset detection
            [ev_tmp, dummy, offs] = threshdet_tap_v6_00(tap_dat(:,ii), mn_isi(1), Fs, ons_thresh);
            ev_tmp = cell2mat(ev_tmp);
            if tp_inds(1)==1 %need to remove the first detected event as artefact
                ev_tmp = ev_tmp(2:end, :);
            end
            ev_tmp = ev_tmp .* to_ms; %needs to be in ms. 
            ev{ii} = [ev_tmp, ones(size(ev_tmp)).* (ons_thresh+offs)]; %time, amplitude
        case 1 %Peak detection
            [dummy, ev{ii}] = pk_det_mattap_v6_00(t, tap_dat(:,ii), 'p', .99, sens, .6, .6, 0);
            ev{ii} = ev{ii}(:,2:3); %time, amplitude
            
        case 2 %Trough detection
            [ev{ii}, dummy] = pk_det_mattap_v6_00(t, tap_dat(:,ii), 'p', .99, sens, .6, .6, 0);
            ev{ii} = ev{ii}(:,2:3); %time, amplitude
            
    end
   
     if tp_inds==1 %for mic change the amplitude point of the markers to ensure it can be visualised correct
         ev{ii} = [ev{ii}(:,1), ones(size(ev{ii},1),1).* .1]; %time, amplitude
     end
    
    if visual_on && ~isempty(ev{ii})%enable visual checks
        DAG_2_121107([t, raw.raw_data(:,tp_inds(ii))],ev{ii}); %Call data analysis gui
        uiwait(gcf); %wait until editing finishes
        g= guidata(gcf);
        mk{ii} = g.markers;
        onsets{ii} = mk{ii}(:,1);
        close(gcf);
        if ~isempty(onsets{ii})
            onsets{ii} = onsets{ii} - daq_delay; %remove daq_delay.
        end
    else
        if ~isempty(ev{ii})
            onsets{ii} = ev{ii}(:,1) - daq_delay; %just time not amplitude and remove daq_delay.
        else
            onsets{ii} = []; %no data
        end
    end
end
all_onsets = [gen_met_ons, pure_met_ons, onsets]; %Combine: 1,2 Metronome, 3,4 Metronome (no jitt), 5,6, Tap onsets



